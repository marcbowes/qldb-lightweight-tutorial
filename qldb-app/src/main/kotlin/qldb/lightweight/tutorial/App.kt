/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package qldb.lightweight.tutorial

import com.amazon.ion.IonString
import com.amazon.ion.IonStruct
import com.amazon.ion.system.IonSystemBuilder
import com.amazonaws.services.qldbsession.AmazonQLDBSessionClientBuilder
import com.amazonaws.services.qldbsession.model.BadRequestException
import software.amazon.awssdk.regions.Region
import software.amazon.awssdk.services.kinesis.KinesisClient
import software.amazon.awssdk.services.kinesis.model.GetRecordsRequest
import software.amazon.awssdk.services.kinesis.model.GetShardIteratorRequest
import software.amazon.awssdk.services.kinesis.model.ListShardsRequest
import software.amazon.awssdk.services.kinesis.model.ShardIteratorType
import software.amazon.qldb.PooledQldbDriver

val ion = IonSystemBuilder.standard().build()

class App {
    var ledgerName = "sample-ledger"

    fun run() {
        qldb()
        stream()
    }

    fun qldb() {
        val ledger = PooledQldbDriver.builder()
            .withLedger(ledgerName)
            .withSessionClientBuilder(AmazonQLDBSessionClientBuilder.standard().configure())
            .build()

        println("""

Hello and welcome to the QLDB tutorial!
 
Make sure you've already setup the necessary resources by following the README instructions in the top-level directory.
""")

        ledger.session.use {
            try {
                it.execute("create table cats")
                it.execute("create index on cats (name)")
            } catch (t: BadRequestException) {
                assert(t.message?.contains("already exists") ?: false)
            }
        }

        val cats = listOf(
            Cat("Axis", 6),
            Cat("Shadow", 5)
        )

        cats.forEach { cat ->
            ledger.session.use {
                it.execute { tx ->
                    val exists = tx.execute("select 1 from cats where name = ?",
                        listOf(ion.newString(cat.name))).singleOrNull()
                    exists ?: tx.execute("insert into cats ?", listOf(cat.toIon()))
                }
            }
        }

        val tables = ledger.session.use { it.tableNames }
        tables.forEach { table ->
            println("""
                All items in $table:
                -------------${"-".repeat(table.length)}-
            """.trimIndent())
            ledger.session.use {
                it.execute("select * from $table").forEach { v ->
                    println(v.toPrettyString())
                }
            }
            println()
        }
    }

    fun stream() {
        val kinesis = KinesisClient.builder()
            .region(Region.US_WEST_2)
            .build()

        val shard = kinesis.listShards(ListShardsRequest.builder()
            .streamName("sample-ledger-stream")
            .build()).shards().single()

        var iter = kinesis.getShardIterator(GetShardIteratorRequest.builder()
            .streamName("sample-ledger-stream")
            .shardId(shard.shardId())
            .shardIteratorType(ShardIteratorType.TRIM_HORIZON)
            .build()).shardIterator()

        while (true) {
            val response = kinesis.getRecords(GetRecordsRequest.builder()
                .shardIterator(iter)
                .build())

            iter = response.nextShardIterator()

            response.records().forEach {
                val record = ion.singleValue(it.data().asByteArray()) as IonStruct
                val payload = record.get("payload") as IonStruct
                when ((record.get("recordType") as IonString).stringValue()) {
                    "CONTROL" -> println(payload.toPrettyString())
                    "BLOCK_SUMMARY" -> println(payload.get("transactionInfo").toPrettyString())
                    "REVISION_DETAILS" -> println((payload.get("revision") as IonStruct).get("data").toPrettyString())
                }
            }

            if (response.records().isEmpty()) break
        }
    }

    companion object {
        @JvmStatic
        fun main(args: Array<String>) {
            App().run()
        }
    }
}

data class Cat(
    val name: String,
    val age: Int
) {
    fun toIon() = ion.newEmptyStruct().apply {
        add("name", ion.newString(name))
        add("age", ion.newInt(age))
    }
}

private fun AmazonQLDBSessionClientBuilder.configure() = this
    .withRegion("us-west-2")
